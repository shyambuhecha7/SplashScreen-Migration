import android.Manifest
import android.app.AlertDialog
import android.content.Intent
import android.graphics.BitmapFactory
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import android.widget.Button
import android.widget.ImageView
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import com.google.android.material.snackbar.Snackbar
import java.io.File
import java.io.IOException
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {

    private var currentPhotoPath: String? = null
    private var isFrontImage: Boolean = true

    private lateinit var frontImageView: ImageView
    private lateinit var backImageView: ImageView

    private val requestCameraPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->
        if (isGranted) {
            dispatchTakePictureIntent()
        } else {
            Snackbar.make(findViewById(android.R.id.content), "Camera permission is required to take pictures", Snackbar.LENGTH_SHORT).show()
        }
    }

    private val takePictureLauncher = registerForActivityResult(ActivityResultContracts.TakePicture()) { success ->
        if (success) {
            currentPhotoPath?.let {
                val bitmap = BitmapFactory.decodeFile(it)
                if (isFrontImage) {
                    frontImageView.setImageBitmap(bitmap)
                } else {
                    backImageView.setImageBitmap(bitmap)
                }
            }
        }
    }

    private val pickImageLauncher = registerForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->
        uri?.let {
            val bitmap = MediaStore.Images.Media.getBitmap(contentResolver, it)
            if (isFrontImage) {
                frontImageView.setImageBitmap(bitmap)
            } else {
                backImageView.setImageBitmap(bitmap)
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val frontButton: Button = findViewById(R.id.frontButton)
        val backButton: Button = findViewById(R.id.backButton)

        frontImageView = findViewById(R.id.frontImageView)
        backImageView = findViewById(R.id.backImageView)

        frontButton.setOnClickListener {
            isFrontImage = true
            showImageOptionsDialog()
        }
        backButton.setOnClickListener {
            isFrontImage = false
            showImageOptionsDialog()
        }
    }

    private fun showImageOptionsDialog() {
        val builder = AlertDialog.Builder(this)
        val inflater = layoutInflater
        val dialogLayout = inflater.inflate(R.layout.dialog_image_options, null)
        builder.setView(dialogLayout)
        val dialog = builder.create()

        val btnClickPicture: Button = dialogLayout.findViewById(R.id.btnClickPicture)
        val btnPickImage: Button = dialogLayout.findViewById(R.id.btnPickImage)

        btnClickPicture.setOnClickListener {
            requestCameraPermission()
            dialog.dismiss()
        }

        btnPickImage.setOnClickListener {
            pickImageLauncher.launch("image/*")
            dialog.dismiss()
        }

        dialog.show()
    }

    private fun requestCameraPermission() {
        when {
            ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == android.content.pm.PackageManager.PERMISSION_GRANTED -> {
                dispatchTakePictureIntent()
            }
            else -> {
                requestCameraPermissionLauncher.launch(Manifest.permission.CAMERA)
            }
        }
    }

    private fun dispatchTakePictureIntent() {
        val photoFile: File? = try {
            createImageFile()
        } catch (ex: IOException) {
            null
        }
        photoFile?.also {
            val photoURI: Uri = FileProvider.getUriForFile(
                this,
                "com.example.android.fileprovider",
                it
            )
            takePictureLauncher.launch(photoURI)
        }
    }

    @Throws(IOException::class)
    private fun createImageFile(): File {
        val timeStamp: String = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.US).format(Date())
        val storageDir: File = getExternalFilesDir(android.os.Environment.DIRECTORY_PICTURES)!!
        return File.createTempFile(
            "JPEG_${timeStamp}_",
            ".jpg",
            storageDir
        ).apply {
            currentPhotoPath = absolutePath
        }
    }
}
